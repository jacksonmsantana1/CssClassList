{"version":3,"sources":["src/index.js"],"names":[],"mappings":";;;;;AAAA;;;;;;;;;;;AAWA;AACA,SAAS,YAAT,CAAsB,CAAtB,EAAyB;AACvB,OAAK,CAAL,GAAS,CAAT;AACD;;AAED,SAAS,SAAT,CAAmB,CAAnB,EAAsB;AACpB,MAAI,EAAE,SAAN,EAAiB;AACf,WAAO,EAAE,SAAT;AACD;;AAED,SAAO,IAAI,YAAJ,CAAiB,CAAjB,CAAP;AACD;;AAED;AACA,aAAa,SAAb,CAAuB,QAAvB,GAAkC,SAAS,QAAT,CAAkB,CAAlB,EAAqB;AACrD;AACA,MAAM,UAAU,KAAK,CAAL,CAAO,SAAvB;;AAEA;AACA,MAAI,EAAE,MAAF,KAAa,CAAb,IAAkB,EAAE,OAAF,CAAU,GAAV,MAAmB,CAAC,CAA1C,EAA6C;AAC3C,UAAM,IAAI,KAAJ,CAAU,0BAA0B,CAA1B,GAA8B,GAAxC,CAAN;AACD;;AAED,MAAI,CAAC,OAAL,EAAc;AACZ,WAAO,KAAP,CADY,CACE;AACf;;AAED,MAAI,YAAY,CAAhB,EAAmB;AACjB,WAAO,IAAP,CADiB,CACJ;AACd;;AAED;AACA;AACA,SAAO,QAAQ,MAAR,CAAe,QAAQ,CAAR,GAAY,KAA3B,MAAsC,CAAC,CAA9C;AACD,CApBD;;AAsBA;AACA,aAAa,SAAb,CAAuB,GAAvB,GAA6B,SAAS,GAAT,CAAa,CAAb,EAAgB;;AAE3C,MAAM,UAAU,KAAK,CAAL,CAAO,SAAvB;AACA,MAAI,KAAK,QAAL,CAAc,CAAd,CAAJ,EAAsB;AACpB,WADoB,CACZ;AACT;;AAED,MAAI,WAAW,QAAQ,QAAQ,MAAR,GAAiB,CAAzB,MAAgC,GAA/C,EAAoD;AAClD;AACA,QAAI,MAAM,CAAV,CAFkD,CAErC;AACd;;AAED,OAAK,CAAL,CAAO,SAAP,IAAoB,CAApB,CAZ2C,CAYpB;AACxB,CAbD;;AAeA;AACA,aAAa,SAAb,CAAuB,MAAvB,GAAgC,SAAS,MAAT,CAAgB,CAAhB,EAAmB;;AAEjD;AACA,MAAM,UAAU,IAAI,MAAJ,CAAW,QAAQ,CAAR,GAAY,SAAvB,EAAkC,GAAlC,CAAhB;;AAEA;AACA,MAAI,EAAE,MAAF,KAAa,CAAb,IAAkB,EAAE,OAAF,CAAU,GAAV,MAAmB,CAAC,CAA1C,EAA6C;AAC3C,UAAM,IAAI,KAAJ,CAAU,0BAA0B,CAA1B,GAA8B,GAAxC,CAAN;AACD;;AAED,OAAK,CAAL,CAAO,SAAP,GAAmB,KAAK,CAAL,CAAO,SAAP,CAAiB,OAAjB,CAAyB,OAAzB,EAAkC,EAAlC,CAAnB;AACD,CAXD;;AAaA;AACA;AACA,aAAa,SAAb,CAAuB,MAAvB,GAAgC,SAAS,MAAT,CAAgB,CAAhB,EAAmB;AACjD,MAAI,KAAK,QAAL,CAAc,CAAd,CAAJ,EAAsB;AAAE;AACtB,SAAK,MAAL,CAAY,CAAZ,EADoB,CACJ;AAChB,WAAO,KAAP;AACD;;AAED,OAAK,GAAL,CAAS,CAAT,EANiD,CAMpC;AACb,SAAO,IAAP;AACD,CARD;;AAUA;AACA,aAAa,SAAb,CAAuB,QAAvB,GAAkC,SAAS,QAAT,GAAoB;AACpD,SAAO,KAAK,CAAL,CAAO,SAAd;AACD,CAFD;;AAIA;AACA,aAAa,SAAb,CAAuB,OAAvB,GAAiC,SAAS,OAAT,GAAmB;AAClD,SAAO,KAAK,CAAL,CAAO,SAAP,CAAiB,KAAjB,CAAuB,UAAvB,KAAsC,EAA7C;AACD,CAFD;;kBAKQ,S","file":"index.js","sourcesContent":["/*\n * Return the classList property of e, if it has one.\n * Otherwise, return an object that simulates the DOMTokenList API for e.\n * The returned object has contains(), add(), remove(), toggle() and toString()\n * methods for testing and altering the set of classes of the element e.\n * If the classList property is natively supported, the returned object is\n * array-like and has length and array index properties. The simulated\n * DOMTokenList is not array-like, but has a toArray() method that returns\n * a true-array snapshot of the element's class names.\n */\n\n// CSSClassList is a JavaScript class that simulates DOMTokenList\nfunction CSSClassList(e) {\n  this.e = e;\n}\n\nfunction classList(e) {\n  if (e.classList) {\n    return e.classList;\n  }\n\n  return new CSSClassList(e);\n}\n\n// Return true if e.className contains the class c, false otherwise\nCSSClassList.prototype.contains = function contains(c) {\n  // Check common cases first\n  const classes = this.e.className;\n\n  // Check that c is a valid class name\n  if (c.length === 0 || c.indexOf(' ') !== -1) {\n    throw new Error('Invalid class name: \"' + c + '\"');\n  }\n\n  if (!classes) {\n    return false; // e has no classes at all\n  }\n\n  if (classes === c) {\n    return true; // e has one class that matches exactly\n  }\n\n  // Otherwise, use a RegExp to search for c as a word by itself\n  // \\b in a regular expression requires a match at a word boundary.\n  return classes.search('\\\\b' + c + '\\\\b') !== -1;\n};\n\n// Add c to the e.className if it is not already present\nCSSClassList.prototype.add = function add(c) {\n\n  const classes = this.e.className;\n  if (this.contains(c)) {\n    return; // Do nothing if already present\n  }\n\n  if (classes && classes[classes.length - 1] !== ' ') {\n    /*eslint no-param-reassign:0*/\n    c = ' ' + c; // Add a space if we need one\n  }\n\n  this.e.className += c; // Add c to the className\n};\n\n// Remove all occurrences of c from e.className\nCSSClassList.prototype.remove = function remove(c) {\n\n  // Remove all occurances of c as a word, plus any trailing space\n  const pattern = new RegExp('\\\\b' + c + '\\\\b\\\\s*', 'g');\n\n  // Make sure c is a valid class name\n  if (c.length === 0 || c.indexOf(' ') !== -1) {\n    throw new Error('Invalid class name: \"' + c + '\"');\n  }\n\n  this.e.className = this.e.className.replace(pattern, '');\n};\n\n// Add c to e.className if it is not already present and return true.\n// Otherwise, remove all occurrences of c from e.className and return false.\nCSSClassList.prototype.toggle = function toggle(c) {\n  if (this.contains(c)) { // If e.className contains c\n    this.remove(c); // then remove it.\n    return false;\n  }\n\n  this.add(c); // add it.\n  return true;\n};\n\n// Return e.className itself\nCSSClassList.prototype.toString = function toString() {\n  return this.e.className;\n};\n\n// Return of the names in e.className\nCSSClassList.prototype.toArray = function toArray() {\n  return this.e.className.match(/\\b\\w+\\b/g) || [];\n};\n\nexport\ndefault classList;\n"]}