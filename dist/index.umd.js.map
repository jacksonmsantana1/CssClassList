{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap bb9d400b60769d6fdf3e","webpack:///./index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA,EAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;;AAEA;AACA,iBAAgB;AAChB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,YAAW;AACX;;AAEA;AACA;AACA,iBAAgB;AAChB;;AAEA,yBAAwB;AACxB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;;AAEA,eAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,kC","file":"index.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"class-list\"] = factory();\n\telse\n\t\troot[\"class-list\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap bb9d400b60769d6fdf3e\n **/","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n * Return the classList property of e, if it has one.\n * Otherwise, return an object that simulates the DOMTokenList API for e.\n * The returned object has contains(), add(), remove(), toggle() and toString()\n * methods for testing and altering the set of classes of the element e.\n * If the classList property is natively supported, the returned object is\n * array-like and has length and array index properties. The simulated\n * DOMTokenList is not array-like, but has a toArray() method that returns\n * a true-array snapshot of the element's class names.\n */\n\n// CSSClassList is a JavaScript class that simulates DOMTokenList\nfunction CSSClassList(e) {\n  this.e = e;\n}\n\nfunction classList(e) {\n  if (e.classList) {\n    return e.classList;\n  }\n\n  return new CSSClassList(e);\n}\n\n// Return true if e.className contains the class c, false otherwise\nCSSClassList.prototype.contains = function contains(c) {\n  // Check common cases first\n  var classes = this.e.className;\n\n  // Check that c is a valid class name\n  if (c.length === 0 || c.indexOf(' ') !== -1) {\n    throw new Error('Invalid class name: \"' + c + '\"');\n  }\n\n  if (!classes) {\n    return false; // e has no classes at all\n  }\n\n  if (classes === c) {\n    return true; // e has one class that matches exactly\n  }\n\n  // Otherwise, use a RegExp to search for c as a word by itself\n  // \\b in a regular expression requires a match at a word boundary.\n  return classes.search('\\\\b' + c + '\\\\b') !== -1;\n};\n\n// Add c to the e.className if it is not already present\nCSSClassList.prototype.add = function add(c) {\n\n  var classes = this.e.className;\n  if (this.contains(c)) {\n    return; // Do nothing if already present\n  }\n\n  if (classes && classes[classes.length - 1] !== ' ') {\n    /*eslint no-param-reassign:0*/\n    c = ' ' + c; // Add a space if we need one\n  }\n\n  this.e.className += c; // Add c to the className\n};\n\n// Remove all occurrences of c from e.className\nCSSClassList.prototype.remove = function remove(c) {\n\n  // Remove all occurances of c as a word, plus any trailing space\n  var pattern = new RegExp('\\\\b' + c + '\\\\b\\\\s*', 'g');\n\n  // Make sure c is a valid class name\n  if (c.length === 0 || c.indexOf(' ') !== -1) {\n    throw new Error('Invalid class name: \"' + c + '\"');\n  }\n\n  this.e.className = this.e.className.replace(pattern, '');\n};\n\n// Add c to e.className if it is not already present and return true.\n// Otherwise, remove all occurrences of c from e.className and return false.\nCSSClassList.prototype.toggle = function toggle(c) {\n  if (this.contains(c)) {\n    // If e.className contains c\n    this.remove(c); // then remove it.\n    return false;\n  }\n\n  this.add(c); // add it.\n  return true;\n};\n\n// Return e.className itself\nCSSClassList.prototype.toString = function toString() {\n  return this.e.className;\n};\n\n// Return of the names in e.className\nCSSClassList.prototype.toArray = function toArray() {\n  return this.e.className.match(/\\b\\w+\\b/g) || [];\n};\n\nexports.default = classList;\n\n//# sourceMappingURL=index.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}